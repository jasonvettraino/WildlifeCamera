# Starter pipeline

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- Master

pool:
  vmImage: ubuntu-latest

variables:
  newLambdaFunction: false
  newGreengrassComponent: false
  newGreengrassDeployment: false
  
steps:

- powershell: |
      ## get the changed files
      $files=$(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion))
      $temp=$files -split ' '
      $count=$temp.Length
      echo "Total changed $count files"
     
      For ($i=0; $i -lt $temp.Length; $i++)
      {
        $name=$temp[$i]
        echo "this is $name file"
        if ($name -like 'AWS/Lambda/*')  #if f1 is a subfolder under a folder use "- like '*/f1/*'"
        { 
          ##archive folder artifacts if it is changed.
          ##Compress-Archive -Path $(system.defaultworkingdirectory)/f1 -DestinationPath $(Build.ArtifactStagingDirectory)/f1.zip
          
          ##set the flag variable f1Flag to true
          Write-Host "##vso[task.setvariable variable=newLambdaFunction]true"
        }
        
        if ($name -like 'AWS/GreenGrass/artifacts/*')  #if f1 is a subfolder under a folder use "- like '*/f1/*'"
        { 
          ##archive folder artifacts if it is changed.
          ##Compress-Archive -Path $(system.defaultworkingdirectory)/f1 -DestinationPath $(Build.ArtifactStagingDirectory)/f1.zip
          
          ##set the flag variable f1Flag to true
          Write-Host "##vso[task.setvariable variable=newGreengrassComponent]true"
        }

        if ($name -like 'AWS/GreenGrass/*Deploy.json')
        {
          ##achive folder f2 if it is changed.
          ##Compress-Archive -Path $(system.defaultworkingdirectory)/f2 -DestinationPath $(Build.ArtifactStagingDirectory)/f2.zip
          ##set the flag variable f2Flag to true
          Write-Host "##vso[task.setvariable variable=newGreengrassDeployment]True"
        }
      }
      ## create a temp folder to hold the changed files
      New-Item -ItemType directory -Path $(system.defaultworkingdirectory)\temp

      foreach($file in $temp){
        if(Test-Path -path $file){
        Copy-Item -Path $file -Destination $(system.defaultworkingdirectory)\temp
        }
      }
      ## zip the temp folder which only have the changed files
      Compress-Archive -Path $(system.defaultworkingdirectory)\temp\* -DestinationPath $(Build.ArtifactStagingDirectory)\changedfiles.zip

  
- task: S3Upload@1
  inputs:
    awsCredentials: 'WildlifePipeline'
    regionName: 'eu-west-1'
    bucketName: 'wildlifecamera.cloudystuff.info'
##    sourceFolder: '$(Build.SourcesDirectory)/AWS/Cloudformation'
    sourceFolder: '$(system.defaultworkingdirectory)/temp/AWS/Cloudformation'
    globExpressions: '*(*.yml|*.json)'
    targetFolder: 'cloudformation'
    createBucket: true
    keyManagement: 'awsManaged'
    encryptionAlgorithm: 'AES256'

- task: S3Upload@1
  inputs:
    awsCredentials: 'WildlifePipeline'
    regionName: 'eu-west-1'
    bucketName: 'wildlifecamera.cloudystuff.info'
    sourceFolder: '$(Build.SourcesDirectory)/AWS/Lambda'
    globExpressions: '**'
    targetFolder: 'Lambda'
    keyManagement: 'awsManaged'
    encryptionAlgorithm: 'AES256'
  condition: and(succeeded(), eq(variables.newLambdaFunction, true))

- task: CloudFormationCreateOrUpdateStack@1
  inputs:
    awsCredentials: 'WildlifePipeline'
    regionName: 'eu-west-1'
    stackName: 'WildlifeCameraLambda'
    templateSource: 'file'
    templateFile: '$(Build.SourcesDirectory)/AWS/Cloudformation/catalogImage.yml'
    globExpressions: '*(*.yml|*.json)'
    targetFolder: 'cloudformation'
    createBucket: true
    keyManagement: 'awsManaged'
    encryptionAlgorithm: 'AES256'
  condition: and(succeeded(), eq(variables.newLambdaFunction, true))

- task: S3Upload@1
  inputs:
    awsCredentials: 'WildlifePipeline'
    regionName: 'eu-west-1'
    bucketName: 'greengrass-component-artifacts-392706139484-eu-west-1'
    sourceFolder: '$(Build.SourcesDirectory)/AWS/GreenGrass/artifacts'
    globExpressions: '**'
    targetFolder: 'artifacts'
    createBucket: true
  condition: and(succeeded(), eq(variables.newGreengrassComponent, true))


- task: AWSCLI@1
  inputs:
    awsCredentials: 'WildlifePipeline'
    regionName: 'eu-west-1'
    awsCommand: 'greengrassv2'
    awsSubCommand: 'create-component-version'
    awsArguments: '--inline-recipe fileb://$(Build.SourcesDirectory)/AWS/GreenGrass/WildlifePICamera.json'
  condition: and(succeeded(), eq(variables.newGreengrassComponent, true))

- task: AWSCLI@1
  inputs:
    awsCredentials: 'WildlifePipeline'
    regionName: 'eu-west-1'
    awsCommand: 'greengrassv2'
    awsSubCommand: 'create-deployment'
    awsArguments: '--cli-input-json file://$(Build.SourcesDirectory)/AWS/GreenGrass/WildlifePICameraDeploy.json'
  condition: and(succeeded(), eq(variables.newGreengrassDeployment, true))
