Description: Lambda script to trigger each time picture loaded into source bucket.
Parameters:
  BucketSuffix:
    Description: Suffix for image buckets
    Type: String
    Default: cloudystuff.info
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: LambdaProcessedImageDeposit
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource: !Sub "arn:aws:s3:::processedimage.${BucketSuffix}/*"
      - PolicyName: LambdaCatImageDeposit
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
              Resource: !Sub "arn:aws:s3:::catimage.${BucketSuffix}/*"
      - PolicyName: LambdaInputImageShift
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'S3:DeleteObject'
                - 'S3:GetObject'
              Resource: !Sub "arn:aws:s3:::inputimage.${BucketSuffix}/*"
      - PolicyName: LambdaRefImageCheck
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'S3:GetObject'
              Resource: !Sub "arn:aws:s3:::referenceimage.${BucketSuffix}/*"
      - PolicyName: RekognitionLabels
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'rekognition:DetectLabels'
              Resource: "*"

  CatalogImage:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CatalogImage
      Description: Lambda function to process each bucket image loaded
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
            var AWS = require('aws-sdk');
            var s3 = new AWS.S3();
            var rekognition = new AWS.Rekognition();

            exports.handler = (event, context, callback) => {
            // TODO implement
                var responseData = {};
                var eventText= JSON.stringify(event);
                console.log('event data is:');
                
            //    console.log(eventText);
                var sourceBucket = event.Records[0].s3.bucket.name;
                var catTargetBucket = 'catimage' + sourceBucket.substr(sourceBucket.indexOf('.'),(sourceBucket.length - sourceBucket.indexOf('.')));
                var processedTargetBucket = 'processedimage' + sourceBucket.substr(sourceBucket.indexOf('.'),(sourceBucket.length - sourceBucket.indexOf('.')));
                var moveObject = event.Records[0].s3.object.key;
                var sourceObject = sourceBucket + '/' + moveObject;
                console.log('bucket name ',sourceBucket);
                console.log('object name ', moveObject);
                console.log('cat target bucket ', catTargetBucket);
                console.log('processed target bucket ', processedTargetBucket);
                console.log('SourceObject ', sourceObject);
                
            //  Add Rekognition code
                var params = {
                    Image: {
                    S3Object: {
                        Bucket: sourceBucket, 
                        Name: moveObject
                        }
                    }, 
                    MaxLabels: 100, 
                    MinConfidence: 70
                };
                
                rekognition.detectLabels(params, function(err, data) {
                if (err) console.log(err, err.stack); // an error occurred
                else {     console.log(data);           // successful response
                   /*
                   data = {
                    Labels: [
                       {
                      Confidence: 99.25072479248047, 
                      Name: "People"
                     }, 
                       {
                      Confidence: 99.25074005126953, 
                      Name: "Person"
                     }
                    ]
                   }
                   */

            
            //  Move file to processed bucket if not deemed cat image
            //    if (event.RequestType == 'Create') {
                  var copyParams = {
                    Bucket: processedTargetBucket,
                    CopySource: sourceObject,
                    Key: moveObject
                  };
                  var deleteParams = {
                    Bucket: sourceBucket,
                    Key: moveObject
                  };
                  s3.copyObject(copyParams, function(err, data) {
                  if (err) console.log(err, err.stack); // an error occurred
                  else {
                    console.log(data);           // successful response
                    s3.deleteObject(deleteParams, function(err, data) {
                    if (err) console.log(err, err.stack);  // error
                    else     console.log();                 // deleted
                    })};
                  });
            //    }            
                
            // Move file to cat bucket if probability high enough
            //    if (event.RequestType == 'Create') {
                  var copyParams = {
                    Bucket: catTargetBucket,
                    CopySource: sourceObject,
                    Key: moveObject
                  };
                  var deleteParams = {
                    Bucket: sourceBucket,
                    Key: moveObject
                  };
            
            //    }            
                }
                });
                var response = {
                    statusCode: 200, 
                    body: JSON.stringify('Hello from Lambda!')
                };

                console.log(response);
                callback(null, response);
            //      s3.putObject(params).promise().then(function(data) {
            //        response.send(event, context, response.SUCCESS, responseData);
            //      }).catch(function(err) {
            //        console.log(JSON.stringify(err));
            //        response.send(event, context, response.FAILED, responseData);
            //      });
            //    } else if (event.RequestType == 'Delete') {
            //      var deleteParams = {
            //        Bucket: event.ResourceProperties.Bucket,
            //        Key: event.ResourceProperties.Key
            //      };
            //     s3.deleteObject(deleteParams).promise().then(function(data) {
            //        response.send(event, context, response.SUCCESS, responseData);
            //      }).catch(function(err) {
            //        console.log(JSON.stringify(err));
            //        response.send(event, context, response.FAILED, responseData);
            //      });
            //    } else {
            //      response.send(event, context, response.SUCCESS, responseData);
            //    }
            //  };
            };

      Timeout: 30
      Runtime: nodejs12.x
